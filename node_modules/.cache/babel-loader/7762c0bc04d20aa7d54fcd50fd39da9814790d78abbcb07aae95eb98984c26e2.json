{"ast":null,"code":"import React from \"react\";\nimport { useState, useEffect } from 'react';\n\n// import Video from \"../components/video\";\n\nexport default function VideosSection() {\n  // const youtubeVideoAPI = \"https://www.googleapis.com/youtube/v3/videos?\";\n  // const youtubeAPIKey = \"AIzaSyAvWZ9W7xA5cmUkjPVZxIC1tbLWgh9abiY\";\n  // const regionCode = \"SA\";\n\n  // const [videos, setVideos] = useState([]);\n\n  const VideoFetchAPI = () => {\n    fetch(youtubeVideoAPI + new URLSearchParams({\n      key: youtubeAPIKey,\n      part: 'snippet',\n      chart: 'mostPopular',\n      maxResults: 2,\n      regionCode: regionCode\n    })).then(res => res.json()).then(data => {\n      console.log(data);\n      data.items.forEach(item => ChannelFetchAPI(item));\n    });\n  };\n  const ChannelFetchAPI = video => {\n    fetch(\"https://www.googleapis.com/youtube/v3/channels?\" + new URLSearchParams({\n      key: youtubeAPIKey,\n      part: 'snippet',\n      id: video.snippet.channelId\n    })).then(res => res.json()).then(data => {\n      video.channelThumbnail = data.items[0].snippet.thumbnails.default.url;\n      setVideos(video);\n    });\n  };\n\n  // useEffect(() => {VideoFetchAPI()});\n\n  return {/* \n             {videos.map((video) => (\n                 <Video \n                     key={video.id}\n                     videoImage={video.snippet.thumbnails.high.url}\n                     videoTitle={video.snippet.title}\n                     // videoTime={}\n                     // videoDate={}\n                     // videoViews={}\n                     channelImage={video.channelThumbnail}\n                     channelName={video.snippet.channelTitle}\n                  />\n             ))} \n             */};\n}\n_c = VideosSection;\nvar _c;\n$RefreshReg$(_c, \"VideosSection\");","map":{"version":3,"names":["React","useState","useEffect","VideosSection","VideoFetchAPI","fetch","youtubeVideoAPI","URLSearchParams","key","youtubeAPIKey","part","chart","maxResults","regionCode","then","res","json","data","console","log","items","forEach","item","ChannelFetchAPI","video","id","snippet","channelId","channelThumbnail","thumbnails","default","url","setVideos","_c","$RefreshReg$"],"sources":["/Users/ahmedmohamed/Downloads/GOOGLE DRIVE/PROGRAMING/WEB DEV/PROJECTS/YouTube-clone/src/sections/VideosSection.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from 'react';\n\n// import Video from \"../components/video\";\n\nexport default function VideosSection() {\n    // const youtubeVideoAPI = \"https://www.googleapis.com/youtube/v3/videos?\";\n    // const youtubeAPIKey = \"AIzaSyAvWZ9W7xA5cmUkjPVZxIC1tbLWgh9abiY\";\n    // const regionCode = \"SA\";\n\n    // const [videos, setVideos] = useState([]);\n\n    const VideoFetchAPI = () => {\n        fetch(youtubeVideoAPI + new URLSearchParams({\n            key: youtubeAPIKey,\n            part: 'snippet',\n            chart: 'mostPopular',\n            maxResults: 2,\n            regionCode: regionCode,\n        }))\n        .then(res => res.json())\n        .then(data => {\n            console.log(data);\n            data.items.forEach(item => ChannelFetchAPI(item))\n        })\n    }\n\n    const ChannelFetchAPI = (video) => {\n        fetch(\"https://www.googleapis.com/youtube/v3/channels?\" + new URLSearchParams({\n                key: youtubeAPIKey,\n                part: 'snippet',\n                id: video.snippet.channelId\n            }))\n            .then(res => res.json())\n            .then(data => {\n                video.channelThumbnail = data.items[0].snippet.thumbnails.default.url;\n                setVideos(video);\n            })\n    }\n\n    // useEffect(() => {VideoFetchAPI()});\n\n    return (\n        {/* \n            {videos.map((video) => (\n                <Video \n                    key={video.id}\n                    videoImage={video.snippet.thumbnails.high.url}\n                    videoTitle={video.snippet.title}\n                    // videoTime={}\n                    // videoDate={}\n                    // videoViews={}\n                    channelImage={video.channelThumbnail}\n                    channelName={video.snippet.channelTitle}\n                 />\n            ))} \n            */}\n    )\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;;AAEA,eAAe,SAASC,aAAaA,CAAA,EAAG;EACpC;EACA;EACA;;EAEA;;EAEA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACxBC,KAAK,CAACC,eAAe,GAAG,IAAIC,eAAe,CAAC;MACxCC,GAAG,EAAEC,aAAa;MAClBC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,aAAa;MACpBC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAEA;IAChB,CAAC,CAAC,CAAC,CACFC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACVC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjBA,IAAI,CAACG,KAAK,CAACC,OAAO,CAACC,IAAI,IAAIC,eAAe,CAACD,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,eAAe,GAAIC,KAAK,IAAK;IAC/BnB,KAAK,CAAC,iDAAiD,GAAG,IAAIE,eAAe,CAAC;MACtEC,GAAG,EAAEC,aAAa;MAClBC,IAAI,EAAE,SAAS;MACfe,EAAE,EAAED,KAAK,CAACE,OAAO,CAACC;IACtB,CAAC,CAAC,CAAC,CACFb,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACVO,KAAK,CAACI,gBAAgB,GAAGX,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAACM,OAAO,CAACG,UAAU,CAACC,OAAO,CAACC,GAAG;MACrEC,SAAS,CAACR,KAAK,CAAC;IACpB,CAAC,CAAC;EACV,CAAC;;EAED;;EAEA,OACI,CAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAbS,CAaM;AAEf;AAACS,EAAA,GArDuB9B,aAAa;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}