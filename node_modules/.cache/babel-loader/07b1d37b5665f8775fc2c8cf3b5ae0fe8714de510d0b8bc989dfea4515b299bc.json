{"ast":null,"code":"var _jsxFileName = \"/Users/ahmedmohamed/Downloads/GOOGLE DRIVE/PROGRAMING/WEB DEV/PROJECTS/YouTube-clone/src/pages/home-page.jsx\",\n  _s2 = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport Video from \"../components/video\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage() {\n  _s2();\n  var _s = $RefreshSig$();\n  const youtubeVideoAPI = \"https://www.googleapis.com/youtube/v3/videos?\";\n  const youtubeAPIKey = \"AIzaSyAvWZ9W7xA5cmUkjPVZxIC1tbLWgh9abiY\";\n  const regionCode = \"SA\";\n  const [videos, setVideos] = useState([]);\n  useEffect(() => {\n    fetch(youtubeVideoAPI + new URLSearchParams({\n      key: youtubeAPIKey,\n      part: 'snippet',\n      chart: 'mostPopular',\n      maxResults: 50,\n      regionCode: regionCode\n    })).then(res => res.json()).then(data => {\n      data.items.forEach(item => {\n        GetChannelIcon(item);\n      });\n    });\n    // .then(data => setVideos(data.items));\n  }, []);\n  const GetChannelIcon = video_data => {\n    _s();\n    useEffect(() => {\n      fetch(\"https://www.googleapis.com/youtube/v3/channels?\" + new URLSearchParams({\n        key: youtubeAPIKey,\n        part: 'snippet',\n        id: video_data.snippet.channelId\n      })).then(res => res.json()).then(data => {\n        video_data.channelThumbnail = data.items[0].snippet.thumbnails.default.url;\n        setVideos(video_data);\n      });\n    }, [video_data]);\n  };\n\n  // useEffect(() => {\n  //     fetch(\"https://www.googleapis.com/youtube/v3/channels?\" + new URLSearchParams({\n  //         key: \"AIzaSyAvWZ9W7xA5cmUkjPVZxIC1tbLWgh9abiY\",\n  //         part: 'snippet',\n  //         id: videos.map((video) => {video.snippet.channelId})\n  //     }))\n  //     .then(res => res.json())\n  //     .then(data => {\n  //         video_data.channelThumbnail = data.items[0].snippet.thumbnails.default.url;\n  //         makeVideoCard(video_data);\n  //     })\n  // }, []);\n  _s(GetChannelIcon, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  console.log(videos[0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-page\",\n    children: videos.map(video => /*#__PURE__*/_jsxDEV(Video, {\n      videoImage: video.snippet.thumbnails.high.url,\n      videoTitle: video.snippet.title\n      // videoTime={}\n      // videoDate={}\n      // videoViews={}\n      // channelImage={}\n      ,\n      channelName: video.snippet.channelTitle\n    }, video.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s2(HomePage, \"39g9r2hk3cJXA16k+db4Z3Rqykw=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","Video","jsxDEV","_jsxDEV","HomePage","_s2","_s","$RefreshSig$","youtubeVideoAPI","youtubeAPIKey","regionCode","videos","setVideos","fetch","URLSearchParams","key","part","chart","maxResults","then","res","json","data","items","forEach","item","GetChannelIcon","video_data","id","snippet","channelId","channelThumbnail","thumbnails","default","url","console","log","className","children","map","video","videoImage","high","videoTitle","title","channelName","channelTitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ahmedmohamed/Downloads/GOOGLE DRIVE/PROGRAMING/WEB DEV/PROJECTS/YouTube-clone/src/pages/home-page.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from 'react';\n\nimport Video from \"../components/video\";\n\nexport default function HomePage() {\n    const youtubeVideoAPI = \"https://www.googleapis.com/youtube/v3/videos?\";\n    const youtubeAPIKey = \"AIzaSyAvWZ9W7xA5cmUkjPVZxIC1tbLWgh9abiY\";\n    const regionCode = \"SA\";\n    const [videos, setVideos] = useState([]);\n    useEffect(() => {\n        fetch(youtubeVideoAPI + new URLSearchParams({\n            key: youtubeAPIKey,\n            part: 'snippet',\n            chart: 'mostPopular',\n            maxResults: 50,\n            regionCode: regionCode,\n        }))\n        .then(res => res.json())\n        .then(data => {\n            data.items.forEach(item => {\n                GetChannelIcon(item);\n            })\n        })\n        // .then(data => setVideos(data.items));\n    }, []);\n\n    const GetChannelIcon = (video_data) => {\n        useEffect(() => {\n            fetch(\"https://www.googleapis.com/youtube/v3/channels?\" + new URLSearchParams({\n                key: youtubeAPIKey,\n                part: 'snippet',\n                id: video_data.snippet.channelId\n            }))\n            .then(res => res.json())\n            .then(data => {\n                video_data.channelThumbnail = data.items[0].snippet.thumbnails.default.url;\n                setVideos(video_data);\n            })\n        }, [video_data]);\n    }\n\n    // useEffect(() => {\n    //     fetch(\"https://www.googleapis.com/youtube/v3/channels?\" + new URLSearchParams({\n    //         key: \"AIzaSyAvWZ9W7xA5cmUkjPVZxIC1tbLWgh9abiY\",\n    //         part: 'snippet',\n    //         id: videos.map((video) => {video.snippet.channelId})\n    //     }))\n    //     .then(res => res.json())\n    //     .then(data => {\n    //         video_data.channelThumbnail = data.items[0].snippet.thumbnails.default.url;\n    //         makeVideoCard(video_data);\n    //     })\n    // }, []);\n\n    console.log(videos[0])\n\n    return (\n        <div className=\"home-page\">\n            {videos.map((video) => (\n                <Video \n                    key={video.id}\n                    videoImage={video.snippet.thumbnails.high.url}\n                    videoTitle={video.snippet.title}\n                    // videoTime={}\n                    // videoDate={}\n                    // videoViews={}\n                    // channelImage={}\n                    channelName={video.snippet.channelTitle}\n                 />\n            ))}\n        </div>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,KAAK,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAC/B,MAAMC,eAAe,GAAG,+CAA+C;EACvE,MAAMC,aAAa,GAAG,yCAAyC;EAC/D,MAAMC,UAAU,GAAG,IAAI;EACvB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxCC,SAAS,CAAC,MAAM;IACZa,KAAK,CAACL,eAAe,GAAG,IAAIM,eAAe,CAAC;MACxCC,GAAG,EAAEN,aAAa;MAClBO,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,aAAa;MACpBC,UAAU,EAAE,EAAE;MACdR,UAAU,EAAEA;IAChB,CAAC,CAAC,CAAC,CACFS,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACVA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;QACvBC,cAAc,CAACD,IAAI,CAAC;MACxB,CAAC,CAAC;IACN,CAAC,CAAC;IACF;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAIC,UAAU,IAAK;IAAArB,EAAA;IACnCN,SAAS,CAAC,MAAM;MACZa,KAAK,CAAC,iDAAiD,GAAG,IAAIC,eAAe,CAAC;QAC1EC,GAAG,EAAEN,aAAa;QAClBO,IAAI,EAAE,SAAS;QACfY,EAAE,EAAED,UAAU,CAACE,OAAO,CAACC;MAC3B,CAAC,CAAC,CAAC,CACFX,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;QACVK,UAAU,CAACI,gBAAgB,GAAGT,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAACM,OAAO,CAACG,UAAU,CAACC,OAAO,CAACC,GAAG;QAC1EtB,SAAS,CAACe,UAAU,CAAC;MACzB,CAAC,CAAC;IACN,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EACpB,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAArB,EAAA,CA1BMoB,cAAc;EA4BpBS,OAAO,CAACC,GAAG,CAACzB,MAAM,CAAC,CAAC,CAAC,CAAC;EAEtB,oBACIR,OAAA;IAAKkC,SAAS,EAAC,WAAW;IAAAC,QAAA,EACrB3B,MAAM,CAAC4B,GAAG,CAAEC,KAAK,iBACdrC,OAAA,CAACF,KAAK;MAEFwC,UAAU,EAAED,KAAK,CAACX,OAAO,CAACG,UAAU,CAACU,IAAI,CAACR,GAAI;MAC9CS,UAAU,EAAEH,KAAK,CAACX,OAAO,CAACe;MAC1B;MACA;MACA;MACA;MAAA;MACAC,WAAW,EAAEL,KAAK,CAACX,OAAO,CAACiB;IAAa,GAPnCN,KAAK,CAACZ,EAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQf,CACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAC7C,GAAA,CApEuBD,QAAQ;AAAA+C,EAAA,GAAR/C,QAAQ;AAAA,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}